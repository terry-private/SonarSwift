/// 最大公約数を求める関数
///
/// 与えられた2つの整数からユークリッドの互除法を用いて最大公約数を計算します。
/// 計算結果は常に正の値になります。
///
/// - Parameters:
///   - lhs: 最初の整数。正数、負数、またはゼロが指定可能です。
///   - rhs: 2つ目の整数。正数、負数、またはゼロが指定可能です。
/// - Returns: 指定された2つの整数の最大公約数を返します。ゼロを含む場合、もう一方の数値の絶対値を返します。
///
/// # 注意
/// - 両方の値が0の場合、返される値は `0` です。
/// - **`Int.min` を引数として与える場合、絶対値を計算しようとするとオーバーフローが発生し、クラッシュします。**
///   - `Int.min` の絶対値は `-Int.min` として計算されますが、これは `Int` の範囲外になるためです。
/// - 再帰計算が多く発生するケース（例: 連続するフィボナッチ数）でも正しく処理します。
///
/// # 例
/// ```swift
/// gcd(48, 18) // 6
/// gcd(-48, -18) // 6
/// gcd(0, 10) // 10
/// gcd(1, 1) // 1
/// gcd(Int.max, 1) // 1
/// // gcd(Int.min, 0) // 実行するとクラッシュします
/// ```
public func gcd(_ lhs: Int, _ rhs: Int) -> Int {
    rhs == 0 ? abs(lhs) : gcd(rhs, lhs % rhs)
}
